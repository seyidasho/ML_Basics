{
  "hash": "b2ab72c2e1c64239c33dca09b2b9a578",
  "result": {
    "markdown": "---\ntitle: Classification\nauthor: Seyi Dasho\nformat:\n  html:\n    code-fold: true\n---\n\n**Classification**<br>\nClassification involves predicting a categorical label or class for new observations based on labeled training data.\n\n**Common Classification Algorithms** <br>\no\t**Logistic Regression:** Predicts class probabilities using a logistic function. Popular introductory algorithm.<br>\no\t**Decision Trees:** Makes predictions by branching left or right based on feature values. Interpretable but prone to overfitting.<br>\no\t**K-Nearest Neighbors:** Classifies points based on proximity to labeled examples in feature space. Simple but sensitive to scaling.<br>\no\t**Support Vector Machines:** Finds an optimal hyperplane to separate classes. Powerful but requires tuning.<br>\no\t**Neural Networks:** Multi-layer neural net models learn complex class boundaries from features. Very flexible but act as \"black boxes\".\n\n**Key steps in classification include:**<br> \no\tPreprocessing data and engineering informative features.<br> \no\tSplitting data into train and test sets.<br> \no\tTraining a model on the training set.<br> \no\tEvaluating model accuracy on the test set.<br> \no\tUsing cross-validation techniques to tune hyperparameters and reduce overfitting.<br> \no\tChoosing evaluation metrics like accuracy, precision, recall, F1-score based on use case.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.datasets import fetch_covtype\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncovtype= fetch_covtype() \nX, y = covtype.data, covtype.target\n\n# Split data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train, fit and predict logistic regression model\nlr = LogisticRegression(random_state=42)\nlr.fit(X_train, y_train)\ny_pred_lr = lr.predict(X_test)\n# Evaluate the classifiers\naccuracy_lr = accuracy_score(y_test, y_pred_lr)\nconf_matrix_lr = confusion_matrix(y_test, y_pred_lr)\n\n\n# Train, fit and predict Decision Tree model\ndt = DecisionTreeClassifier(random_state=42)\ndt.fit(X_train, y_train)\ny_pred_dt = dt.predict(X_test)\n# Evaluate the classifiers\naccuracy_dt = accuracy_score(y_test, y_pred_dt)\nconf_matrix_dt = confusion_matrix(y_test, y_pred_dt)\n\nprint(f'Decision Tree Accuracy: {accuracy_dt:.2f}')\nprint(f'Logistic Regression Accuracy: {accuracy_lr:.2f}')\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n# Decision Tree Confusion Matrix\nsns.heatmap(conf_matrix_dt, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[0])\naxes[0].set_title('Decision Tree Confusion Matrix')\naxes[0].set_xlabel('Predicted')\naxes[0].set_ylabel('True')\n\n# Random Forest Confusion Matrix\nsns.heatmap(conf_matrix_lr, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[1])\naxes[1].set_title('Logistic Regression Accuracy Matrix')\naxes[1].set_xlabel('Predicted')\naxes[1].set_ylabel('True')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDecision Tree Accuracy: 0.93\nLogistic Regression Accuracy: 0.62\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Classification_files/figure-html/cell-2-output-2.png){width=1170 height=449}\n:::\n:::\n\n\n•\tThis loads the dataset, splits the data into train and test sets, trains a Logistic Regression and a Decision tree models, makes predictions on the test set, and calculates the accuracy.<br>\n•\tThis shows a basic machine learning workflow for classification in Python - loading data, training a model, making predictions and evaluating performance. The steps can be adapted for other algorithms and datasets.\n\n",
    "supporting": [
      "Classification_files"
    ],
    "filters": [],
    "includes": {}
  }
}