{"title":"Classification","markdown":{"yaml":{"title":"Classification","author":"Seyi Dasho","format":{"html":{"code-fold":true}},"jupyter":"python3"},"headingText":"Split data into train and test","containsRefs":false,"markdown":"\n\n**Classification**<br>\nClassification involves predicting a categorical label or class for new observations based on labeled training data.\n\n**Common Classification Algorithms** <br>\no\t**Logistic Regression:** Predicts class probabilities using a logistic function. Popular introductory algorithm.<br>\no\t**Decision Trees:** Makes predictions by branching left or right based on feature values. Interpretable but prone to overfitting.<br>\no\t**K-Nearest Neighbors:** Classifies points based on proximity to labeled examples in feature space. Simple but sensitive to scaling.<br>\no\t**Support Vector Machines:** Finds an optimal hyperplane to separate classes. Powerful but requires tuning.<br>\no\t**Neural Networks:** Multi-layer neural net models learn complex class boundaries from features. Very flexible but act as \"black boxes\".\n\n**Key steps in classification include:**<br> \no\tPreprocessing data and engineering informative features.<br> \no\tSplitting data into train and test sets.<br> \no\tTraining a model on the training set.<br> \no\tEvaluating model accuracy on the test set.<br> \no\tUsing cross-validation techniques to tune hyperparameters and reduce overfitting.<br> \no\tChoosing evaluation metrics like accuracy, precision, recall, F1-score based on use case.\n\n```{python}\nimport os\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.datasets import fetch_covtype\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncovtype= fetch_covtype() \nX, y = covtype.data, covtype.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train, fit and predict logistic regression model\nlr = LogisticRegression(random_state=42)\nlr.fit(X_train, y_train)\ny_pred_lr = lr.predict(X_test)\n# Evaluate the classifiers\naccuracy_lr = accuracy_score(y_test, y_pred_lr)\nconf_matrix_lr = confusion_matrix(y_test, y_pred_lr)\n\n\n# Train, fit and predict Decision Tree model\ndt = DecisionTreeClassifier(random_state=42)\ndt.fit(X_train, y_train)\ny_pred_dt = dt.predict(X_test)\n# Evaluate the classifiers\naccuracy_dt = accuracy_score(y_test, y_pred_dt)\nconf_matrix_dt = confusion_matrix(y_test, y_pred_dt)\n\nprint(f'Decision Tree Accuracy: {accuracy_dt:.2f}')\nprint(f'Logistic Regression Accuracy: {accuracy_lr:.2f}')\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n# Decision Tree Confusion Matrix\nsns.heatmap(conf_matrix_dt, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[0])\naxes[0].set_title('Decision Tree Confusion Matrix')\naxes[0].set_xlabel('Predicted')\naxes[0].set_ylabel('True')\n\n# Random Forest Confusion Matrix\nsns.heatmap(conf_matrix_lr, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[1])\naxes[1].set_title('Logistic Regression Accuracy Matrix')\naxes[1].set_xlabel('Predicted')\naxes[1].set_ylabel('True')\n\nplt.show()\n```\n\n•\tThis loads the dataset, splits the data into train and test sets, trains a Logistic Regression and a Decision tree models, makes predictions on the test set, and calculates the accuracy.<br>\n•\tThis shows a basic machine learning workflow for classification in Python - loading data, training a model, making predictions and evaluating performance. The steps can be adapted for other algorithms and datasets.\n\n\n","srcMarkdownNoYaml":"\n\n**Classification**<br>\nClassification involves predicting a categorical label or class for new observations based on labeled training data.\n\n**Common Classification Algorithms** <br>\no\t**Logistic Regression:** Predicts class probabilities using a logistic function. Popular introductory algorithm.<br>\no\t**Decision Trees:** Makes predictions by branching left or right based on feature values. Interpretable but prone to overfitting.<br>\no\t**K-Nearest Neighbors:** Classifies points based on proximity to labeled examples in feature space. Simple but sensitive to scaling.<br>\no\t**Support Vector Machines:** Finds an optimal hyperplane to separate classes. Powerful but requires tuning.<br>\no\t**Neural Networks:** Multi-layer neural net models learn complex class boundaries from features. Very flexible but act as \"black boxes\".\n\n**Key steps in classification include:**<br> \no\tPreprocessing data and engineering informative features.<br> \no\tSplitting data into train and test sets.<br> \no\tTraining a model on the training set.<br> \no\tEvaluating model accuracy on the test set.<br> \no\tUsing cross-validation techniques to tune hyperparameters and reduce overfitting.<br> \no\tChoosing evaluation metrics like accuracy, precision, recall, F1-score based on use case.\n\n```{python}\nimport os\nimport numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.datasets import fetch_covtype\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncovtype= fetch_covtype() \nX, y = covtype.data, covtype.target\n\n# Split data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train, fit and predict logistic regression model\nlr = LogisticRegression(random_state=42)\nlr.fit(X_train, y_train)\ny_pred_lr = lr.predict(X_test)\n# Evaluate the classifiers\naccuracy_lr = accuracy_score(y_test, y_pred_lr)\nconf_matrix_lr = confusion_matrix(y_test, y_pred_lr)\n\n\n# Train, fit and predict Decision Tree model\ndt = DecisionTreeClassifier(random_state=42)\ndt.fit(X_train, y_train)\ny_pred_dt = dt.predict(X_test)\n# Evaluate the classifiers\naccuracy_dt = accuracy_score(y_test, y_pred_dt)\nconf_matrix_dt = confusion_matrix(y_test, y_pred_dt)\n\nprint(f'Decision Tree Accuracy: {accuracy_dt:.2f}')\nprint(f'Logistic Regression Accuracy: {accuracy_lr:.2f}')\n\nfig, axes = plt.subplots(1, 2, figsize=(15, 5))\n# Decision Tree Confusion Matrix\nsns.heatmap(conf_matrix_dt, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[0])\naxes[0].set_title('Decision Tree Confusion Matrix')\naxes[0].set_xlabel('Predicted')\naxes[0].set_ylabel('True')\n\n# Random Forest Confusion Matrix\nsns.heatmap(conf_matrix_lr, annot=True, fmt='g', cmap='Reds', xticklabels=covtype.target_names, yticklabels=covtype.target_names, ax=axes[1])\naxes[1].set_title('Logistic Regression Accuracy Matrix')\naxes[1].set_xlabel('Predicted')\naxes[1].set_ylabel('True')\n\nplt.show()\n```\n\n•\tThis loads the dataset, splits the data into train and test sets, trains a Logistic Regression and a Decision tree models, makes predictions on the test set, and calculates the accuracy.<br>\n•\tThis shows a basic machine learning workflow for classification in Python - loading data, training a model, making predictions and evaluating performance. The steps can be adapted for other algorithms and datasets.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Classification.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Classification","author":"Seyi Dasho","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}